/* NiNi ‚Äî App JS (full, ƒë√£ ch·ªânh)
   - [TH√äM] TTS (n√∫t üîä) ƒë·ªçc ph·ª• ƒë·ªÅ theo ng√¥n ng·ªØ ƒëang ch·ªçn
   - [S·ª¨A]  B·ªô ƒë·∫øm trang hi·ªÉn th·ªã ·ªü g√≥c tr√™n-ph·∫£i (#pageCounterTop)
   - [S·ª¨A]  Render ph·ª• ƒë·ªÅ v√†o #subtitleText
*/
(() => {
  // ========================================================================
  // 0) CONSTANTS & SAFE GETTERS
  // ========================================================================
  const IMAGES = {
    home:   "/public/assets/bg/nini_home.webp",
    spring: "/public/assets/images/seasons/spring.webp",
    summer: "/public/assets/images/seasons/summer.webp",
    autumn: "/public/assets/images/seasons/autumn.webp",
    winter: "/public/assets/images/seasons/winter.webp",
  };

  // ƒë∆∞·ªùng d·∫´n manifest & book
  const LIB_MANIFEST_URL = "/public/content/storybook/library-manifest.json";
  const BOOK_URL = (id) => `/public/content/storybook/${id}.json`;

  // safe query
  const $  = (sel, root=document) => root.querySelector(sel);
  const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));

  // ========================================================================
  // 1) SEASON BACKGROUND + TABS + CHIPS
  // ========================================================================
  const tabs    = $$("#seasonTabs .tab");
  const frame   = $("#frame");
  const content = $("#content");

  function setSeason(season) {
    const img = IMAGES[season] || IMAGES.home;

    // n·ªÅn ngo√†i khung
    document.documentElement.style.setProperty("--bg-url", `url("${img}")`);
    // n·ªÅn trong khung
    if (frame) frame.style.backgroundImage = `url("${img}")`;

    // active tab
    tabs.forEach(b => b.classList.toggle("is-active", b.dataset.season === season));

    // hash router (#/spring)
    const newHash = `#/${season}`;
    if (location.hash !== newHash) {
      history.replaceState({}, "", newHash);
      window.dispatchEvent(new HashChangeEvent("hashchange"));
    }

    // Khi ƒë·ªïi m√πa ‚Üí n·∫øu l√† "spring" th√¨ hi·ªÉn th·ªã k·ªá s√°ch trong khung
    if (season === "spring") {
      renderShelfInFrame();
    } else {
      const mount = $("#shelfMount");
      if (mount) mount.hidden = true, mount.innerHTML = "";
    }
  }

  function bootSeasonFromHash() {
    const raw = (location.hash || "").replace(/^#\/?/, "");
    const s = (raw || "home").toLowerCase();
    setSeason(IMAGES[s] ? s : "home");
  }

  tabs.forEach(btn => btn.addEventListener("click", () => setSeason(btn.dataset.season)));

  // Chips n·ªôi dung
  const chips = $$(".chip");
  const SECTIONS = {
    intro: `<h2>NiNi ‚Äî Funny</h2>
      <p>B·∫°n c√≥ nghƒ© vi·ªác h·ªçc ti·∫øng Anh l√† m·ªôt th·ª≠ th√°ch kh√≥ nh·∫±n v√† ƒë·∫ßy √°p l·ª±c kh√¥ng? H√£y qu√™n ƒëi c√°ch h·ªçc truy·ªÅn th·ªëng v√† kh√°m ph√° m·ªôt th·∫ø gi·ªõi ho√†n to√†n m·ªõi v·ªõi <strong>NiNi ‚Äî Funny</strong>!</p>
      <p>V·ªõi slogan "Ch∆°i m√™ ly, b·ª©t ph√° t∆∞ duy", NiNi-Funny kh√¥ng ch·ªâ l√† m·ªôt tr√≤ ch∆°i gi·∫£i tr√≠, m√† c√≤n l√† c√¥ng c·ª• gi√∫p b·∫°n:</p>
      <ul>
        <li>ƒê·∫Øm ch√¨m v√†o cu·ªôc phi√™u l∆∞u: Kh√°m ph√° nh·ªØng m√†n ch∆°i ƒë·∫ßy m√†u s·∫Øc, gi·∫£i ƒë·ªë nh·ªØng c√¢u chuy·ªán h·∫•p d·∫´n v√† chinh ph·ª•c c√°c th·ª≠ th√°ch ng√¥n ng·ªØ m·ªôt c√°ch t·ª± nhi√™n.</li>
        <li>H·ªçc m√† nh∆∞ ch∆°i: M·ªü r·ªông v·ªën t·ª´ v·ª±ng, r√®n luy·ªán ng·ªØ ph√°p v√† tƒÉng kh·∫£ nƒÉng ph·∫£n x·∫° ti·∫øng Anh th√¥ng qua c√°c mini-game vui nh·ªôn v√† s√°ng t·∫°o.</li>
        <li>Ph√°t tri·ªÉn b·∫£n th√¢n: B·ª©t ph√° kh·ªèi nh·ªØng gi·ªõi h·∫°n c·ªßa b·∫£n th√¢n, t∆∞ duy logic v√† k·ªπ nƒÉng gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c n√¢ng cao m·ªôt c√°ch ƒë√°ng k·ªÉ.</li>
      </ul>
      <p>H√£y t·∫£i <strong>NiNi ‚Äî Funny</strong> ngay h√¥m nay v√† b·∫Øt ƒë·∫ßu h√†nh tr√¨nh bi·∫øn ti·∫øng Anh th√†nh m·ªôt ni·ªÅm vui b·∫•t t·∫≠n.</p>`,
    rules: `<h2>Lu·∫≠t ch∆°i</h2>
      <p>M·ªói mini game c√≥ h∆∞·ªõng d·∫´n ng·∫Øn ngay tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu. Ch∆°i vui, c√¥ng b·∫±ng v√† t√¥n tr·ªçng b·∫°n ch∆°i.</p>
      <p>Tuy nhi√™n, m√¨nh ti·∫øt l·ªô m·ªôt b√≠ m·∫≠t nho nh·ªè: mu·ªën ki·∫øm nhi·ªÅu xu th√¨ h√£y tham gia CLUB ho·∫∑c l·∫≠p CLUB ri√™ng!</p>`,
    forum: `<h2>Di·ªÖn ƒë√†n</h2><p>G√≥c ƒë·ªÉ khoe th√†nh t√≠ch, trao ƒë·ªïi m·∫πo ch∆°i v√† ƒë·∫∑t c√¢u h·ªèi.</p>`,
    feedback: `<h2>G√≥p √Ω</h2>
      <p>G·ª≠i g√≥p √Ω v·ªÅ: <a href="mailto:support@nini-funny.com">support@nini-funny.com</a></p>
      <p>Li√™n h·ªá k·ªπ thu·∫≠t: <a href="mailto:admin@nini-funny.com">admin@nini-funny.com</a></p>`,
  };
  chips.forEach(ch => ch.addEventListener("click", () => {
    chips.forEach(c => c.classList.toggle("is-active", c === ch));
    if (content) content.innerHTML = SECTIONS[ch.dataset.section] || SECTIONS.intro;
  }));

  // ========================================================================
  // 2) AUTH MODAL (ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω)
  // ========================================================================
  const authBtn   = $("#authBtn");
  const authModal = $("#authModal");
  const closeEls  = authModal ? $$("[data-close]", authModal) : [];
  const tabLines  = authModal ? $$("#authTabs .tab-line", authModal) : [];
  const panes     = authModal ? $$(".form", authModal) : [];

  function openAuth(which = "login") {
    if (!authModal) return;
    authModal.setAttribute("aria-hidden", "false");
    switchAuth(which);
  }
  function closeAuth() { authModal?.setAttribute("aria-hidden", "true"); }
  function switchAuth(which) {
    tabLines.forEach(t => t.classList.toggle("is-active", t.dataset.auth === which));
    panes.forEach(p => p.classList.toggle("is-active", p.dataset.pane === which));
  }
  authBtn?.addEventListener("click", () => openAuth("login"));
  closeEls.forEach(el => el.addEventListener("click", closeAuth));
  authModal?.addEventListener("click", e => {
    if (e.target === authModal || e.target.classList.contains("modal__backdrop")) closeAuth();
  });
  tabLines.forEach(t => t.addEventListener("click", () => switchAuth(t.dataset.auth)));

  // ========================================================================
  // 3) K·ªÜ S√ÅCH (render trong khung #frame, mount ·ªü #shelfMount)
  // ========================================================================
  let libraryManifest = null; // cache manifest

  async function fetchJSON(url) {
    const res = await fetch(url, { cache: "no-store" });
    if (!res.ok) throw new Error(`Fetch fail ${url}: ${res.status}`);
    return await res.json();
  }

  async function loadLibraryManifest() {
    if (libraryManifest) return libraryManifest;
    try {
      const data = await fetchJSON(LIB_MANIFEST_URL);
      libraryManifest = data;
      return data;
    } catch (e) {
      console.warn("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c manifest:", e);
      return null;
    }
  }

  function tplBookCard(b) {
    const cover = b.cover || "/public/assets/bg/nini_home.webp";
    const title = b.title_vi || b.title_en || b.id || "NiNi book";
    const meta  = b.author ? `T√°c gi·∫£: ${b.author}` : "";
    return `
      <article class="book-card" data-book="${b.id}">
        <img class="book-card__cover" src="${cover}" alt="${title}">
        <div class="book-card__body">
          <h4 class="book-card__title">${title}</h4>
          <div class="book-card__meta">${meta}</div>
        </div>
      </article>
    `;
  }

  async function renderShelfInFrame() {
    const mount = $("#shelfMount");
    if (!mount) return;
    const data = await loadLibraryManifest();
    if (!data || !Array.isArray(data.books) || !data.books.length) {
      mount.hidden = false;
      mount.innerHTML = `<div class="shelf-empty">Ch∆∞a c√≥ s√°ch. ƒê·∫∑t <code>${LIB_MANIFEST_URL}</code> v√† c√°c file <code>/public/content/storybook/&lt;ID&gt;.json</code>.</div>`;
      return;
    }

    const html = data.books.map(tplBookCard).join("");
    mount.hidden = false;
    mount.innerHTML = `<div class="shelf"><h3 class="shelf__title">K·ªá s√°ch</h3><div class="shelf__grid">${html}</div></div>`;

    // click m·ªü reader
    mount.querySelectorAll(".book-card").forEach(card => {
      card.addEventListener("click", () => {
        const id = card.dataset.book;
        openBookById(id);
      });
    });
  }

  async function openBookById(id) {
    try {
      const book = await fetchJSON(BOOK_URL(id));
      openReaderCalendar(book);
    } catch (e) {
      console.error("Kh√¥ng m·ªü ƒë∆∞·ª£c s√°ch:", e);
      alert("Kh√¥ng m·ªü ƒë∆∞·ª£c cu·ªën s√°ch n√†y. Vui l√≤ng ki·ªÉm tra JSON/ƒë∆∞·ªùng d·∫´n ·∫£nh.");
    }
  }

  // ========================================================================
  // 4) READER ‚ÄúCALENDAR‚Äù 16:9 ‚Äî preload ·∫£nh + spinner + Prev/Next + VI/EN
  // ========================================================================
  const readerModal  = $("#readerModal");
  const calViewport  = $("#calendarViewport");
  const calBg        = $("#calendarBg");
  const btnPrevImg   = $("#imgPrev");
  const btnNextImg   = $("#imgNext");

  const btnLangVi = $("#btnLangVi");
  const btnLangEn = $("#btnLangEn");
  const btnSpeak  = $("#btnSpeak");

  const btnReaderClose = readerModal && $('[data-reader-close]', readerModal);

  let currentBook = null;
  let pageIdx = 0;
  let speakLang = localStorage.getItem("reader_lang") || "vi"; // 'vi' | 'en'

  // ===== [TH√äM] TTS (Text-to-Speech) =====
  let isSpeaking = false;
  let speakUtter = null;
  let speakVoices = [];

  function loadVoices() {
    try { speakVoices = speechSynthesis.getVoices(); } catch { speakVoices = []; }
  }
  loadVoices();
  if (window.speechSynthesis) {
    window.speechSynthesis.onvoiceschanged = loadVoices;
  }

  function pickVoice(langCode) {
    if (!speakVoices.length) loadVoices();
    const primary = speakVoices.find(v => v.lang?.toLowerCase().startsWith(langCode));
    return primary || speakVoices.find(v => v.lang?.toLowerCase().startsWith("en")) || null;
  }

  function stopSpeak() {
    isSpeaking = false;
    try { window.speechSynthesis.cancel(); } catch {}
  }

  function speakCurrent() {
    stopSpeak();
    if (!currentBook || !window.SpeechSynthesisUtterance) return;
    const p = (currentBook.pages || [])[pageIdx] || {};
    const text = (speakLang === "en" ? pageTextEn(p) : pageTextVi(p)) || "";
    if (!text.trim()) return;

    speakUtter = new SpeechSynthesisUtterance(text);
    const voice = pickVoice(speakLang === "en" ? "en" : "vi");
    if (voice) speakUtter.voice = voice;
    speakUtter.rate = 1; speakUtter.pitch = 1; speakUtter.volume = 1;

    speakUtter.onend = () => { isSpeaking = false; };
    speakUtter.onerror = () => { isSpeaking = false; };

    window.speechSynthesis.speak(speakUtter);
    isSpeaking = true;
  }
  // ===== H·∫æT PH·∫¶N TH√äM TTS =====

  function pickPageImage(p = {}) {
    return p.image || p.L_image_P || p.img || p.L_image || "";
  }
  function pageTextVi(p = {}) {
    return p.text_vi || p.noidung_vi || "";
  }
  function pageTextEn(p = {}) {
    return p.text_en || p.noidung_en || "";
  }

  function setLang(lang) {
    speakLang = lang === "en" ? "en" : "vi";
    localStorage.setItem("reader_lang", speakLang);
    [btnLangVi, btnLangEn].forEach(b => b && b.classList.remove("is-active"));
    if (speakLang === "vi") btnLangVi?.classList.add("is-active");
    else btnLangEn?.classList.add("is-active");
    renderSubtitle();
    if (isSpeaking) speakCurrent(); // ƒë·ªçc l·∫°i theo ng√¥n ng·ªØ m·ªõi
  }

  // [S·ª¨A] Render ph·ª• ƒë·ªÅ v√†o #subtitleText (thay v√¨ #subtitleBubble)
  function renderSubtitle() {
    const el = $("#subtitleText");
    if (!el || !currentBook) return;
    const p = (currentBook.pages || [])[pageIdx] || {};
    const txt = speakLang === "en" ? pageTextEn(p) : pageTextVi(p);
    el.textContent = txt || "";
  }

  function setLoading(on) {
    if (!calViewport) return;
    calViewport.classList.toggle("is-loading", !!on);
    calViewport.classList.toggle("is-ready", !on);
  }

  // [S·ª¨A] Ghi ƒë·∫øm trang v√†o #pageCounterTop (v√† #pageCounter n·∫øu c√≤n)
  function renderPageCounter() {
    const total = (currentBook?.pages || []).length || 1;
    const txt = `Trang ${Math.min(pageIdx + 1, total)}/${total}`;
    const elTop = $("#pageCounterTop");
    if (elTop) elTop.textContent = txt;
    const elOld = $("#pageCounter");
    if (elOld) elOld.textContent = txt;
  }

  // === CORE: render 1 trang ·∫£nh (preload r·ªìi m·ªõi show) ===
  function renderCalendarPage() {
    if (!calViewport || !calBg || !currentBook) return;

    const pages = currentBook.pages || [];
    const p     = pages[pageIdx] || {};

    setLoading(true);
    renderPageCounter();
    renderSubtitle();

    const url = pickPageImage(p);
    if (!url) {
      calBg.style.backgroundImage = "";
      setLoading(false);
      return;
    }
    const tmp = new Image();
    tmp.onload = () => {
      calBg.style.backgroundImage = `url("${url}")`;
      setLoading(false);
      if (isSpeaking) speakCurrent();
    };
    tmp.onerror = () => {
      calBg.style.backgroundImage = "";
      setLoading(false);
    };
    tmp.src = url;
  }

  function openReaderCalendar(book) {
    currentBook = book;
    pageIdx = 0;

    const h = readerModal && $("#readerTitle", readerModal);
    if (h) h.textContent = book.title_vi || book.title_en || book.id || "NiNi Book";

    readerModal?.setAttribute("aria-hidden", "false");
    setLang(speakLang); // set active n√∫t VI/EN
    renderCalendarPage();
  }

  function closeReader() {
    stopSpeak(); // [TH√äM] d·ª´ng TTS khi ƒë√≥ng
    readerModal?.setAttribute("aria-hidden", "true");
  }

  // NAV ·∫£nh
  btnPrevImg?.addEventListener("click", () => {
    if (!currentBook) return;
    if (pageIdx > 0) { pageIdx--; renderCalendarPage(); }
  });
  btnNextImg?.addEventListener("click", () => {
    if (!currentBook) return;
    const total = (currentBook.pages || []).length || 0;
    if (pageIdx < total - 1) { pageIdx++; renderCalendarPage(); }
  });

  btnLangVi?.addEventListener("click", () => setLang("vi"));
  btnLangEn?.addEventListener("click", () => setLang("en"));
  btnSpeak?.addEventListener("click", () => { if (isSpeaking) stopSpeak(); else speakCurrent(); });

  btnReaderClose?.addEventListener("click", closeReader);
  readerModal?.addEventListener("click", e => {
    if (e.target === readerModal || e.target.classList.contains("modal__backdrop")) closeReader();
  });
  setLang(speakLang); // init active state

  // ========================================================================
  // 5) STARTUP
  // ========================================================================
  bootSeasonFromHash();
  window.addEventListener("hashchange", bootSeasonFromHash);

  // Preload ·∫£nh n·ªÅn m√πa ƒë·ªÉ chuy·ªÉn m∆∞·ª£t
  Object.values(IMAGES).forEach(src => { const i = new Image(); i.src = src; });
})();
