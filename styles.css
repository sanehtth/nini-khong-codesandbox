/* =========================================================================
 * NiNi — App JS (FULL, giữ nguyên modal kính mờ của bạn)
 * ========================================================================= */

/* ----------------------- HẰNG & THAM CHIẾU CỐ ĐỊNH ---------------------- */
const IMAGES = {
  home:  "/public/assets/bg/nini_home.webp",
  spring:"/public/assets/images/seasons/spring.webp",
  summer:"/public/assets/images/seasons/summer.webp",
  autumn:"/public/assets/images/seasons/autumn.webp",
  winter:"/public/assets/images/seasons/winter.webp",
};

const LIB_PATH = "/public/content/storybook";
const MANIFEST = `${LIB_PATH}/library-manifest.json`;

const tabs      = document.querySelectorAll("#seasonTabs .tab");
const frame     = document.getElementById("frame");
const content   = document.getElementById("content");
const shelfMount= document.getElementById("shelfMount");

/* --------------------------- TRẠNG THÁI TOÀN CỤC ------------------------ */
let library = [];
let currentBook = null;
let pageIdx = 0;
let speakLang = "vi";

// refs trong Reader (set sau ensureReaderDom/openReader)
let readerModal, calendarBg, subtitleBubble, imgPrev, imgNext, pageInfoEl;

/* ------------------------------ TIỆN ÍCH CƠ BẢN ------------------------ */
async function fetchJSON(url){
  try{ const r = await fetch(url, {cache:"no-store"}); if(!r.ok) throw 0; return await r.json(); }
  catch(_){ console.warn("fetchJSON fail:", url); return null; }
}

/* ------------------------------ ĐỔI MÙA / ROUTER ------------------------ */
function setSeason(season) {
  const img = IMAGES[season] || IMAGES.home;
  document.documentElement.style.setProperty("--bg-url", `url("${img}")`);
  frame.style.backgroundImage = `url("${img}")`;
  tabs.forEach(b => b.classList.toggle("is-active", b.dataset.season === season));

  const newHash = `#/${season}`;
  if (location.hash !== newHash) {
    history.replaceState({}, "", newHash);
    window.dispatchEvent(new HashChangeEvent("hashchange"));
  }

  if (season === "spring") { shelfMount.hidden = false; renderShelf(); }
  else { shelfMount.hidden = true; }
}
function bootSeasonFromHash(){
  const raw = (location.hash || "").replace(/^#\/?/, "");
  const s = (raw || "home").toLowerCase();
  setSeason(IMAGES[s] ? s : "home");
}
tabs.forEach(btn => btn.addEventListener("click", () => setSeason(btn.dataset.season)));

/* ----------------------------- NỘI DUNG 4 CHIP -------------------------- */
const chips = document.querySelectorAll(".chip");
const SECTIONS = {
  intro:`<h2>NiNi — Funny</h2><p>…</p>`,
  rules:`<h2>Luật chơi</h2><p>…</p>`,
  forum:`<h2>Diễn đàn</h2><p>…</p>`,
  feedback:`<h2>Góp ý</h2><p>…</p>`
};
chips.forEach(ch=>{
  ch.addEventListener("click", ()=>{
    chips.forEach(c=>c.classList.toggle("is-active", c===ch));
    content.innerHTML = SECTIONS[ch.dataset.section] || SECTIONS.intro;
  });
});

/* ------------------------------- AUTH MODAL ----------------------------- */
const authBtn   = document.getElementById("authBtn");
const authModal = document.getElementById("authModal");
if (authBtn && authModal){
  const closeEls  = authModal.querySelectorAll("[data-close]");
  const tabLines  = authModal.querySelectorAll("#authTabs .tab-line");
  const panes     = authModal.querySelectorAll(".form");
  const openAuth  = (which="login")=>{authModal.setAttribute("aria-hidden","false");switchAuth(which);};
  const closeAuth = ()=>authModal.setAttribute("aria-hidden","true");
  const switchAuth= (which)=>{tabLines.forEach(t=>t.classList.toggle("is-active",t.dataset.auth===which));
                              panes.forEach(p=>p.classList.toggle("is-active",p.dataset.pane===which));};
  authBtn.addEventListener("click",()=>openAuth("login"));
  closeEls.forEach(el=>el.addEventListener("click",closeAuth));
  authModal.addEventListener("click",e=>{ if(e.target===authModal||e.target.classList.contains("modal__backdrop")) closeAuth(); });
  tabLines.forEach(t=>t.addEventListener("click",()=>switchAuth(t.dataset.auth)));
}

/* ============================== KỆ SÁCH ================================= */
async function renderShelf(){
  if (!library.length){
    const m = await fetchJSON(MANIFEST);
    library = Array.isArray(m?.books) ? m.books : [];
  }
  const html = library.map(b=>`
    <article class="book-card" data-book="${b.id}">
      <img class="book-card__cover" src="${b.cover || '/public/assets/bg/nini_home.webp'}" alt="${b.title_vi||b.title_en||b.id}">
      <div class="book-card__body">
        <h4 class="book-card__title">${b.title_vi||b.title_en||b.id}</h4>
        <div class="book-card__meta">Tác giả: ${b.author||""}</div>
      </div>
    </article>
  `).join("");
  shelfMount.innerHTML = `
    <div class="shelf">
      <h3 class="shelf__title">Kệ sách</h3>
      <div class="shelf__grid">${html || `<div class="muted">Chưa có sách: <code>${MANIFEST}</code></div>`}</div>
    </div>`;
  shelfMount.querySelectorAll(".book-card").forEach(c=>c.addEventListener("click",()=>openReader(c.dataset.book)));
}

/* ========== TẠO READER DOM nhưng KHÔNG ĐỤNG CSS .modal/.modal__panel ===== */
function ensureReaderDom(){
  if (document.getElementById("readerModal")) return;

  // chỉ thêm CSS nội bộ cho calendar view, không can thiệp modal kính mờ của bạn
  const css = document.createElement("style");
  css.id = "readerCalendarStyles";
  css.textContent = `
    /* Khu "tấm lịch" nằm bên trong modal__panel, không ảnh hưởng modal */
    .calendar-view{position:relative;width:min(1120px,94vw);aspect-ratio:16/9;border-radius:16px;
      box-shadow:0 22px 60px rgba(0,0,0,.6), inset 0 0 0 1px rgba(255,255,255,.08);
      overflow:hidden; margin:clamp(8px,5vh,28px) auto 0;}
    .calendar-bg{position:absolute;inset:0;background:#000 center/cover no-repeat;
      image-rendering:-webkit-optimize-contrast}
    .subtitle-bubble{position:absolute;left:50%;bottom:18px;transform:translateX(-50%);
      max-width:93%; padding:12px 16px; border-radius:12px; color:#fff; line-height:1.55;
      background:rgba(0,0,0,.55); backdrop-filter: blur(4px); text-align:center}
    .img-nav{position:absolute;inset:auto 0 12px 0; display:flex; justify-content:space-between;
      padding:0 18px; pointer-events:none}
    .pill-nav{pointer-events:auto;border:none;border-radius:999px;padding:10px 12px;cursor:pointer;
      background:rgba(255,255,255,.9)}
    .page-info{position:absolute;left:50%;bottom:12px;transform:translateX(-50%);
      background:rgba(0,0,0,.5); color:#fff; padding:6px 10px; border-radius:999px;font-size:13px}
    .flip-in{animation:flipIn .28s ease}
    @keyframes flipIn{from{transform:scale(.985);opacity:.7}to{transform:scale(1);opacity:1}}
  `;
  document.head.appendChild(css);

  // dùng cấu trúc modal có sẵn của bạn (class .modal/.modal__panel) để hưởng kính mờ
  const wrap = document.createElement("div");
  wrap.id = "readerModal";
  wrap.className = "modal";
  wrap.setAttribute("aria-hidden","true");
  wrap.innerHTML = `
    <div class="modal__backdrop" data-reader-close></div>
    <div class="modal__panel" role="dialog" aria-modal="true" aria-labelledby="readerTitle">
      <button class="modal__close" data-reader-close aria-label="Đóng">×</button>
      <div class="calendar-view" id="calendarView">
        <div class="calendar-bg" id="calendarBg"></div>
        <div class="subtitle-bubble" id="subtitleBubble"></div>
        <div class="img-nav">
          <button class="pill-nav" id="imgPrev">◀</button>
          <button class="pill-nav" id="imgNext">▶</button>
        </div>
        <span class="page-info" id="readerPageInfo"></span>
      </div>
    </div>`;
  document.body.appendChild(wrap);
}

/* -------------------------- OPEN / RENDER READER ------------------------ */
async function openReader(bookId){
  ensureReaderDom();

  readerModal   = document.getElementById("readerModal");
  calendarBg    = document.getElementById("calendarBg");
  subtitleBubble= document.getElementById("subtitleBubble");
  imgPrev       = document.getElementById("imgPrev");
  imgNext       = document.getElementById("imgNext");
  pageInfoEl    = document.getElementById("readerPageInfo");

  const closeAll = ()=>{
    readerModal.setAttribute("aria-hidden","true");
    try{ window.speechSynthesis.cancel(); }catch(_){}
  };
  readerModal.querySelectorAll("[data-reader-close]").forEach(el => el.onclick = closeAll);
  readerModal.addEventListener("click", e=>{
    if (e.target === readerModal || e.target.classList.contains("modal__backdrop")) closeAll();
  });

  const meta = library.find(b => b.id === bookId);
  if (!meta){ alert("Không tìm thấy sách."); return; }
  const book = await fetchJSON(`${LIB_PATH}/${bookId}.json`);
  if (!book){ alert("Không đọc được JSON sách."); return; }

  currentBook = { ...meta, ...book };
  pageIdx = 0;

  imgPrev.onclick = ()=>{ pageIdx = Math.max(0, pageIdx-1); renderPage(true); };
  imgNext.onclick = ()=>{ pageIdx = Math.min((currentBook.pages?.length||1)-1, pageIdx+1); renderPage(true); };

  readerModal.setAttribute("aria-hidden","false");
  renderPage(false);
}

function renderPage(withFlip){
  if(!currentBook) return;
  const pages = currentBook.pages || [];
  const total = pages.length || 1;
  const p = pages[pageIdx] || {};

  const img = p.image || currentBook.cover || "/public/assets/bg/nini_home.webp";
  calendarBg.style.backgroundImage = `url("${img}")`;
  if (withFlip){ calendarBg.classList.remove("flip-in"); void calendarBg.offsetWidth; calendarBg.classList.add("flip-in"); }

  const text = speakLang==="vi" ? (p.text_vi||"") : (p.text_en||"");
  subtitleBubble.textContent = text;
  pageInfoEl.textContent = `Trang ${pageIdx+1}/${total}`;

  const onKey = (e)=>{
    if (e.key==="ArrowLeft")  imgPrev.click();
    if (e.key==="ArrowRight") imgNext.click();
    if (e.key==="Escape")     readerModal.setAttribute("aria-hidden","true");
  };
  window.onkeydown = onKey;
}

/* -------------------------- LANG QUICK SWITCH (optional) ---------------- */
(function quickLang(){
  if (document.getElementById("quickLangSwitch")) return;
  const wrap = document.createElement("div");
  wrap.id = "quickLangSwitch";
  Object.assign(wrap.style,{position:"fixed",right:"14px",bottom:"14px",zIndex:"40",display:"flex",gap:"8px"});
  wrap.innerHTML = `
    <button id="qlVi" style="padding:8px 10px;border-radius:999px;border:1px solid rgba(255,255,255,.3);background:rgba(0,0,0,.4);color:#fff;cursor:pointer">VI</button>
    <button id="qlEn" style="padding:8px 10px;border-radius:999px;border:1px solid rgba(255,255,255,.3);background:rgba(0,0,0,.4);color:#fff;cursor:pointer">EN</button>`;
  document.body.appendChild(wrap);
  const paint=()=>{
    wrap.querySelector("#qlVi").style.background = speakLang==="vi"?"#4ade80":"rgba(0,0,0,.4)";
    wrap.querySelector("#qlEn").style.background = speakLang==="en"?"#60a5fa":"rgba(0,0,0,.4)";
  };
  paint();
  wrap.querySelector("#qlVi").onclick = ()=>{speakLang="vi";paint();renderPage(false);};
  wrap.querySelector("#qlEn").onclick = ()=>{speakLang="en";paint();renderPage(false);};
})();

/* ------------------------------- KHỞI ĐỘNG ------------------------------ */
renderShelf();
bootSeasonFromHash();
window.addEventListener("hashchange", bootSeasonFromHash);
Object.values(IMAGES).forEach(src => { const i = new Image(); i.src = src; });

/* --------- CSS nhỏ cho kệ (nếu styles.css chưa có), không đụng modal ----- */
(function shelfCss(){
  if (document.getElementById("shelfInlineStyles")) return;
  const x = document.createElement("style");
  x.id = "shelfInlineStyles";
  x.textContent = `
    .shelf{position:absolute; top:16px; left:16px; right:16px; margin:auto; max-width:720px;
      background:rgba(0,0,0,.28); backdrop-filter: blur(6px); border:1px solid rgba(255,255,255,.14);
      border-radius:14px; padding:12px}
    .shelf__title{margin:0 0 10px; font-size:18px}
    .shelf__grid{display:grid; grid-template-columns:repeat(2,minmax(0,1fr)); gap:10px}
    .book-card{display:flex; gap:10px; align-items:center; padding:8px; border-radius:12px;
      background:rgba(255,255,255,.05); border:1px solid rgba(255,255,255,.12); cursor:pointer}
    .book-card:hover{border-color:rgba(255,255,255,.3)}
    .book-card__cover{width:64px;height:64px;object-fit:cover;border-radius:10px;flex:none}
    .book-card__body{min-width:0}
    .book-card__title{margin:0 0 4px; font-size:14px}
    .book-card__meta{font-size:12px; opacity:.75}
  `;
  document.head.appendChild(x);
})();
