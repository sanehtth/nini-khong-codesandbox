/* =========================================================================
 *  stage.js ‚Äî Trang Home ki·ªÉu Canva (HTML + JS thu·∫ßn)
 *  - Sidebar icon (d√πng /public/assets/icons/...)
 *  - Storybook hi·ªÉn th·ªã ·ªü c·ªôt gi·ªØa, click truy·ªán => xem ·ªü c·ªôt ph·∫£i
 *  - V·∫´n c√≤n mock Recent designs (c√≥ th·ªÉ thay b·∫±ng d·ªØ li·ªáu th·∫≠t sau)
 * ========================================================================= */

;(() => {
  const N = window.NINI || {};

  /* -----------------------------------------------------------------------
   * [A] C·∫§U H√åNH ‚Äî ICON SIDEBAR & D·ªÆ LI·ªÜU STORYBOOK
   * ----------------------------------------------------------------------- */

  // Sidebar items (icon + nh√£n + href)
  const SIDE_ITEMS = [
    { key: "storybook", label: "Storybook", icon: "/public/assets/icons/book.webp",    href: "#/home"     },
    { key: "video",     label: "Video",     icon: "/public/assets/icons/video.webp",   href: "#/video"    },
    { key: "game",      label: "Game",      icon: "/public/assets/icons/game.webp",    href: "#/game"     },
    { key: "shop",      label: "Shop",      icon: "/public/assets/icons/shop.webp",    href: "#/shop"     },
    { key: "note",      label: "Th√¥ng b√°o", icon: "/public/assets/icons/note.webp",    href: "#/notify"   },
    { key: "chat",      label: "Chat",      icon: "/public/assets/icons/chat.webp",    href: "#/chat"     },
    { key: "setting",   label: "C√†i ƒë·∫∑t",   icon: "/public/assets/icons/setting.webp", href: "#/settings" },
    { key: "user",      label: "C√° nh√¢n",   icon: "/public/assets/icons/user.webp",    href: "#/profile"  },
  ];

  // D·ªØ li·ªáu demo Storybook
  const STORIES = [
    {
      id: "forest-warrior",
      title: "Chi·∫øn binh r·ª´ng xanh",
      summary: "NiNi kh√°m ph√° khu r·ª´ng tr√≠ tu·ªá, gi·∫£i ƒë·ªë qua t·ª´ng m√πa.",
      body: `
        <p>Ch∆∞∆°ng 1 ‚Äî B∆∞·ªõc v√†o c√°nh r·ª´ng: NiNi nh·∫≠n ƒë∆∞·ª£c t·∫•m b·∫£n ƒë·ªì v·ªõi 4 bi·ªÉu t∆∞·ª£ng m√πa Xu√¢n/H·∫°/Thu/ƒê√¥ng.</p>
        <p>Ch∆∞∆°ng 2 ‚Äî C·ª≠a ·∫£i ƒë·∫ßu ti√™n: NiNi gi·∫£i c√¢u ƒë·ªë √°nh s√°ng ƒë·ªÉ m·ªü ƒë∆∞·ªùng t·ªõi th√°c n∆∞·ªõc.</p>
        <p>Ch∆∞∆°ng 3 ‚Äî B·∫°n ƒë·ªìng h√†nh: G·∫∑p C√∫ M√®o, h·ªçc c√°ch gh√©p k√Ω t·ª± ƒë·ªÉ m·ªü kho b√°u.</p>
      `
    },
    {
      id: "secret-of-stars",
      title: "B√≠ m·∫≠t c·ªßa nh·ªØng v√¨ sao",
      summary: "Nh·ªØng th·ª≠ th√°ch nh·ªè gi√∫p b√© luy·ªán t·∫≠p t∆∞ duy v√† t∆∞·ªüng t∆∞·ª£ng.",
      body: `
        <p>Ch∆∞∆°ng 1 ‚Äî B·∫ßu tr·ªùi ƒë√™m: T·∫°o ch√≤m sao b·∫±ng c√°ch n·ªëi c√°c ƒëi·ªÉm s√°ng.</p>
        <p>Ch∆∞∆°ng 2 ‚Äî T√≠n hi·ªáu t·ª´ xa: Gi·∫£i m√£ th√¥ng ƒëi·ªáp b·∫±ng b·∫£ng thay th·∫ø ch·ªØ c√°i.</p>
        <p>Ch∆∞∆°ng 3 ‚Äî ∆Ø·ªõc m∆° c·ªßa NiNi: Vi·∫øt ƒëi·ªÅu ∆∞·ªõc v√† g·ª≠i l√™n d·∫£i ng√¢n h√†.</p>
      `
    }
  ];

  const RECENTS = [
    {title:"Food & Restaurant FAQs Doc in Green", type:"Doc",    edited:"2 days ago", img:"https://images.unsplash.com/photo-1504674900247-0877df9cc836?q=80&w=800&auto=format&fit=crop"},
    {title:"One Pager Doc in Black and White",    type:"Doc",    edited:"2 days ago", img:"https://images.unsplash.com/photo-1486427944299-d1955d23e34d?q=80&w=800&auto=format&fit=crop"},
    {title:"Classroom Fun Poster",                type:"Design", edited:"2 days ago", img:"https://images.unsplash.com/photo-1516387938699-a93567ec168e?q=80&w=800&auto=format&fit=crop"},
  ];

  /* --------------------------- H·∫æT PH·∫¶N [A] ------------------------------ */


  /* -----------------------------------------------------------------------
   * [B] H√ÄM H·ªñ TR·ª¢ RENDER
   * ----------------------------------------------------------------------- */

  // HTML: 1 card recent
  const recentCard = (x) => `
    <article class="card">
      <div class="thumb"><img src="${x.img}" alt=""></div>
      <div class="meta">
        <p class="ttl">${x.title}</p>
        <p class="sub">${x.type} ‚Ä¢ Edited ${x.edited}</p>
      </div>
    </article>
  `;

  // HTML: list Storybook (·ªü c·ªôt gi·ªØa)
  const storyListHTML = (items) => `
    <section class="panel glass storybook">
      <div class="sb-head">üìö Storybook</div>
      <div class="sb-grid">
        ${items.map(s => `
          <article class="sb-card">
            <h4 class="sb-title" data-story="${s.id}">${s.title}</h4>
            <p>${s.summary}</p>
            <button class="btn sb-open" data-story="${s.id}">ƒê·ªçc ngay</button>
          </article>
        `).join("")}
      </div>
    </section>
  `;

  // HTML: shop panel (c·ªôt gi·ªØa, ph√≠a d∆∞·ªõi)
  const shopHTML = () => `
    <section class="panel glass shop">
      <div class="sb-head">üõçÔ∏è Shop</div>
      <div class="shop-grid">
        <article class="shop-card"><h4>Sticker NiNi</h4><p>B·ªô 20 sticker d·ªÖ th∆∞∆°ng.</p><a href="#/shop/sticker" class="btn">Xem</a></article>
        <article class="shop-card"><h4>S·ªï tay gi·∫£i ƒë·ªë</h4><p>100 th·ª≠ th√°ch t∆∞ duy.</p><a href="#/shop/notebook" class="btn">Xem</a></article>
        <article class="shop-card"><h4>√Åo thun NiNi</h4><p>Cotton m·ªÅm, unisex.</p><a href="#/shop/tshirt" class="btn">Xem</a></article>
      </div>
    </section>
  `;

  // HTML: khung hi·ªÉn th·ªã truy·ªán chi ti·∫øt (·ªü c·ªôt ph·∫£i, tr√™n ‚ÄúRecent‚Äù)
  const storyDetailHTML = (s) => `
    <section class="panel glass story-detail">
      <div class="panel-head">
        <h2>${s.title}</h2>
        <button class="seeall sb-close">ƒê√≥ng ‚Ä∫</button>
      </div>
      <div class="story-body">${s.body}</div>
    </section>
  `;

  /* --------------------------- H·∫æT PH·∫¶N [B] ------------------------------ */

// URL manifest th∆∞ vi·ªán
const LIB_URL = "/public/content/storybook/library-manifest.json";

// fetch JSON (kh√¥ng cache)
async function fetchJSON(url){
  const res = await fetch(url, { cache: "no-store" });
  if(!res.ok) throw new Error("Fetch failed: " + res.status);
  return await res.json();
}
// List th∆∞ vi·ªán (render ·ªü C·ªòT GI·ªÆA)
function libraryListHTML(books){
  return `
    <section class="panel glass storybook">
      <div class="sb-head">üìö Storybook</div>
      <div class="lib-grid">
        ${books.map(b => `
          <article class="lib-card" data-book="${b.id}">
            <div class="lib-cover">
              <img src="${b.cover}" alt="${b.title_vi}" loading="lazy"/>
            </div>
            <div class="lib-meta">
              <h4 class="lib-title" data-open="${b.id}" title="${b.title_vi}">
                ${b.title_vi}
              </h4>
              <p class="lib-author">T√°c gi·∫£: ${b.author || "‚Äî"}</p>
            </div>
          </article>
        `).join("")}
      </div>
    </section>
  `;
}

// Panel chi ti·∫øt truy·ªán (render ·ªü C·ªòT PH·∫¢I)
function storyDetailHTML(book){
  return `
    <section class="panel glass story-detail">
      <div class="panel-head">
        <h2>${book.title_vi}</h2>
        <button class="seeall sb-close">ƒê√≥ng ‚Ä∫</button>
      </div>
      <div class="lib-detail">
        <div class="lib-detail-cover">
          <img src="${book.cover}" alt="${book.title_vi}"/>
        </div>
        <div class="lib-detail-info">
          <p><strong>T√°c gi·∫£:</strong> ${book.author || "‚Äî"}</p>
          <p><strong>Thi·∫øt k·∫ø:</strong> ${book.design || "‚Äî"}</p>
          <p><strong>S·ªë trang:</strong> ${book.pages_count ?? "‚Äî"}</p>
        </div>
      </div>
    </section>
  `;
}

// G·∫Øn click ·ªü C·ªòT GI·ªÆA ƒë·ªÉ m·ªü truy·ªán sang C·ªòT PH·∫¢I
function attachLibraryListEvents(root, books){
  const mainHolder = root.querySelector("#detail-holder"); // ·ªü c·ªôt ph·∫£i
  const mid = root.querySelector(".nini-middle");

  mid.querySelectorAll('[data-open]').forEach(el=>{
    el.addEventListener("click", ()=>{
      const id = el.getAttribute("data-open");
      const book = books.find(b => String(b.id) === String(id));
      if(!book) return;

      mainHolder.innerHTML = storyDetailHTML(book);
      // n√∫t ƒë√≥ng
      const closeBtn = mainHolder.querySelector(".sb-close");
      if (closeBtn) closeBtn.addEventListener("click", ()=> mainHolder.innerHTML = "");
      // cu·ªôn t·ªõi panel chi ti·∫øt
      mainHolder.scrollIntoView({behavior:"smooth", block:"start"});
    });
  });
}

// T·∫£i manifest v√† render list v√†o C·ªòT GI·ªÆA
async function loadLibraryIntoMiddle(root){
  const mid = root.querySelector(".nini-middle");
  mid.innerHTML = `<section class="panel glass"><p>ƒêang t·∫£i th∆∞ vi·ªán‚Ä¶</p></section>`;
  try{
    const data = await fetchJSON(LIB_URL);
    const books = (data && data.books) || [];
    mid.innerHTML = libraryListHTML(books);
    attachLibraryListEvents(root, books);
  }catch(e){
    console.error(e);
    mid.innerHTML = `<section class="panel glass"><p style="color:#b91c1c">L·ªói t·∫£i th∆∞ vi·ªán.</p></section>`;
  }
}

  /* -----------------------------------------------------------------------
   * [C] RENDER TRANG
   * ----------------------------------------------------------------------- */
  function renderStage(root) {
    root.innerHTML = `
      <div class="nini-canvas">
        <div class="nini-layout">

          <!-- SIDEBAR ICON -->
          <aside class="nini-side glass">
  <div class="side-icons">
    ${SIDE_ITEMS.map((it, i) => `
      <a href="${it.href}" class="icon-btn ${i===0?'active':''}"
         data-key="${it.key}" aria-label="${it.label}" title="${it.label}">
        <span class="icon">
          <img src="${it.icon}" alt="${it.label}" width="28" height="28" loading="lazy"
               onerror="this.onerror=null; this.src='/public/assets/icons/fallback.png'"/>
        </span>
        <span class="lbl">${it.label}</span>
      </a>
    `).join("")}
  </div>
</aside>

          <!-- C·ªòT GI·ªÆA: STORYBOOK + SHOP -->
          <section class="nini-middle">
            ${storyListHTML(STORIES)}
            ${shopHTML()}
          </section>

          <!-- C·ªòT PH·∫¢I: SEARCH + QUICK + (STORY DETAIL) + RECENT + ASSIGNMENTS -->
          <main class="nini-main">

            <!-- ch·ªó s·∫Ω render truy·ªán chi ti·∫øt khi click -->
            <div id="detail-holder"></div>

            <!-- Search + Quick + Recent -->
            <section class="panel glass">
              <div class="search">
                <input type="text" placeholder="M√¥ t·∫£ √Ω t∆∞·ªüng, m√¨nh s·∫Ω gi√∫p b·∫°n t·∫°o..." />
                <span class="ico">üîé</span>
              </div>

              <div class="quick">
                ${[
                  "Instagram Post","Sheet","Doc","Whiteboard",
                  "Presentation","Social media","Photo editor","Video"
                ].map(l => `
                  <button class="qa">
                    <span class="qa-ico">üß©</span>
                    <span class="qa-txt">${l}</span>
                  </button>
                `).join("")}
              </div>

              <div class="panel-head">
                <h2>Recent designs</h2>
                <a href="#/designs" class="seeall">Xem t·∫•t c·∫£ ‚Ä∫</a>
              </div>
              <div id="recent_grid" class="recents"></div>
            </section>

            <!-- Assignments -->
            <section class="panel glass">
              <div class="panel-head">
                <h2>Assignments</h2>
                <a href="#/classwork" class="seeall">T·ªõi Classwork ‚Ä∫</a>
              </div>
              <div class="empty">
                <h3>Th∆∞ gi√£n th√¥i</h3>
                <p>Khi gi√°o vi√™n giao b√†i, b√†i t·∫≠p s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y v√† trong th√¥ng b√°o.</p>
              </div>
            </section>
          </main>
        </div>
      </div>
    `;

    // Active theo hash hi·ªán t·∫°i
    const cur = (location.hash.split("/")[1] || "home");
    document.querySelectorAll(".icon-btn").forEach(a=>{
      a.classList.toggle("active", a.getAttribute("href").includes(cur));
    });

    // Render recents
    const grid = root.querySelector('#recent_grid');
    grid.innerHTML = RECENTS.map(recentCard).join('');

    // G·∫ÆN S·ª∞ KI·ªÜN: click Storybook ·ªü sidebar => n·∫°p l·∫°i danh s√°ch story
    root.querySelectorAll('.icon-btn[data-key="storybook"]').forEach(btn=>{
      btn.addEventListener('click', (e)=>{
        // NgƒÉn trang nh·∫£y hash n·∫øu mu·ªën
        // e.preventDefault();
        const mid = root.querySelector('.nini-middle');
        if (mid) {
          mid.innerHTML = storyListHTML(STORIES) + shopHTML(); // story + shop
          attachStoryEvents(root); // g·∫Øn l·∫°i click cho ti√™u ƒë·ªÅ/btn "ƒê·ªçc ngay"
        }
      });
    });

    // G·∫Øn s·ª± ki·ªán cho c√°c ti√™u ƒë·ªÅ/btn trong Storybook l·∫ßn ƒë·∫ßu
    attachStoryEvents(root);
  }

  // G·∫Øn click v√†o ti√™u ƒë·ªÅ/btn truy·ªán -> render chi ti·∫øt b√™n ph·∫£i
  function attachStoryEvents(root){
    root.querySelectorAll('.sb-title, .sb-open').forEach(el=>{
      el.addEventListener('click', ()=>{
        const id = el.getAttribute('data-story');
        const story = STORIES.find(s=>s.id===id);
        if (!story) return;
        const holder = root.querySelector('#detail-holder');
        if (holder){
          holder.innerHTML = storyDetailHTML(story);

          // n√∫t ƒë√≥ng chi ti·∫øt
          const closeBtn = holder.querySelector('.sb-close');
          if (closeBtn){
            closeBtn.addEventListener('click', ()=>{
              holder.innerHTML = ''; // x√≥a panel chi ti·∫øt
            });
          }
          // Cu·ªôn l√™n ch·ªó chi ti·∫øt (t√πy)
          holder.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    });
  }

  /* -----------------------------------------------------------------------
   * [D] Thanh ch·ªçn m√πa (n·∫øu b·∫°n c√≤n d√πng)
   * ----------------------------------------------------------------------- */
  function renderSeasonsNav(nav){
    nav.innerHTML = `
      <button data-season="spring">Xu√¢n</button>
      <button data-season="summer">H·∫°</button>
      <button data-season="autumn">Thu</button>
      <button data-season="winter">ƒê√¥ng</button>
    `;
    nav.addEventListener('click', (e)=>{
      const btn = e.target.closest('[data-season]');
      if (!btn) return;
      if (typeof N.setSeason === 'function') N.setSeason(btn.dataset.season);
    });
  }

  /* -----------------------------------------------------------------------
   * [E] Mount
   * ----------------------------------------------------------------------- */
  if (typeof N.mountOnce === 'function') {
    N.mountOnce('#stage', renderStage);
    N.mountOnce('#season_nav', renderSeasonsNav);
  } else {
    const stageEl = document.querySelector('#stage');
    if (stageEl) renderStage(stageEl);
    const navEl = document.querySelector('#season_nav');
    if (navEl) renderSeasonsNav(navEl);
  }
})();



